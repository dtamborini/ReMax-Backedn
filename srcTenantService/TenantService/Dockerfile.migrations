# Dockerfile speciale per TenantService con capacit√† di gestire migrazioni
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Copia la solution e tutti i progetti necessari
COPY ["RemaxManagement.sln", "."]

# Copia tutti i progetti shared
COPY ["srcShared/", "srcShared/"]

# Copia il TenantService
COPY ["srcTenantService/", "srcTenantService/"]

# Copia tutti i microservizi per le migrazioni
COPY ["srcAttachmentService/", "srcAttachmentService/"]
COPY ["srcBuildingService/", "srcBuildingService/"]
COPY ["srcCheckListService/", "srcCheckListService/"]
COPY ["srcCommunicationService/", "srcCommunicationService/"]
COPY ["srcInsuranceService/", "srcInsuranceService/"]
COPY ["srcIssueService/", "srcIssueService/"]
COPY ["srcMaintenanceService/", "srcMaintenanceService/"]
COPY ["srcRfqService/", "srcRfqService/"]
COPY ["srcSupplierService/", "srcSupplierService/"]
COPY ["srcUsersService/", "srcUsersService/"]
COPY ["srcWorkOrderService/", "srcWorkOrderService/"]
COPY ["srcWorkSheetService/", "srcWorkSheetService/"]

# Restore della solution completa
RUN dotnet restore "RemaxManagement.sln"

# Build del TenantService
WORKDIR "/src/srcTenantService/TenantService"
RUN dotnet build "TenantService.csproj" -c $BUILD_CONFIGURATION -o /app/build --no-restore

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "TenantService.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false --no-restore

# Stage finale - include SDK per dotnet ef
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS final
WORKDIR /app

# Installa EF Core tools globalmente
RUN dotnet tool install --global dotnet-ef
ENV PATH="$PATH:/root/.dotnet/tools"

# Copia l'applicazione pubblicata
COPY --from=publish /app/publish .

# Copia tutti i progetti per le migrazioni (necessario per dotnet ef)
COPY --from=build /src /src
WORKDIR /src

ENTRYPOINT ["dotnet", "/app/TenantService.dll"]