// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RfqService.Data.Context;

#nullable disable

namespace RfqService.Migrations
{
    [DbContext(typeof(RfqDbContext))]
    partial class RfqDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RfqService.Data.Entities.Negotiation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("QuotesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ResolutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuotesId");

                    b.ToTable("Negotiations");
                });

            modelBuilder.Entity("RfqService.Data.Entities.NegotiationAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomData")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("NegotiationId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("NegotiationId");

                    b.HasIndex("NegotiationId", "AttachmentId")
                        .IsUnique();

                    b.ToTable("NegotiationAttachments", (string)null);
                });

            modelBuilder.Entity("RfqService.Data.Entities.QuoteAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomData")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("QuoteId", "AttachmentId")
                        .IsUnique();

                    b.ToTable("QuoteAttachments", (string)null);
                });

            modelBuilder.Entity("RfqService.Data.Entities.Quotes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomData")
                        .HasColumnType("jsonb");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("FinalResolutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("InitialPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("InitialResolutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("RfqId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RfqId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("RfqService.Data.Entities.RFQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpireDateRequestForWork")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireDateSupplierResponse")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ExtraordinaryIntervention")
                        .HasColumnType("boolean");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("RecommendedRetailPrice")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReducedVatRate")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkSheetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RFQs");
                });

            modelBuilder.Entity("RfqService.Data.Entities.RfqSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomData")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("RfqId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RfqId");

                    b.ToTable("RfqSuppliers");
                });

            modelBuilder.Entity("RfqService.Data.Entities.Negotiation", b =>
                {
                    b.HasOne("RfqService.Data.Entities.Quotes", "Quotes")
                        .WithMany()
                        .HasForeignKey("QuotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("RfqService.Data.Entities.Quotes", b =>
                {
                    b.HasOne("RfqService.Data.Entities.RFQ", "RFQ")
                        .WithMany()
                        .HasForeignKey("RfqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RFQ");
                });

            modelBuilder.Entity("RfqService.Data.Entities.RfqSupplier", b =>
                {
                    b.HasOne("RfqService.Data.Entities.RFQ", "RFQ")
                        .WithMany()
                        .HasForeignKey("RfqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RFQ");
                });
#pragma warning restore 612, 618
        }
    }
}
